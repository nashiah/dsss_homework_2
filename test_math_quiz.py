import unittest
from math_quiz import function_A, function_B, function_C

class TestMathGame(unittest.TestCase):
    """
    Unit tests for the math quiz game functions to ensure correct functionality.
    """

    def test_function_A(self):
        """
        Test if the random number generated by function_A is within the specified range.
        Ensures function_A returns a number between min_val and max_val (inclusive).
        """
        min_val = 1
        max_val = 10
        try:
            for _ in range(1000):  # Test a large number of random values
                rand_num = function_A(min_val, max_val)
                # Assert that the random number is within the specified range
                self.assertTrue(min_val <= rand_num <= max_val, f"Generated number {rand_num} is out of bounds!")
        except Exception as e:
            self.fail(f"Error in test_function_A: {e}")

    def test_function_B(self):
        """
        Placeholder for future implementation of function_B tests.
        In the future, define test cases to validate the behavior of function_B.
        """
        try:
            # TODO: Add meaningful test cases for function_B.
            pass
        except Exception as e:
            self.fail(f"Error in test_function_B: {e}")

    def test_function_C(self):
        """
        Test the functionality of function_C to ensure correct problem generation and solution.
        This function should validate the generation of a math problem and check the correctness of the result.
        """
        test_cases = [
            # Test addition
            (5, 2, '+', '5 + 2', 7),
            # Test subtraction
            (7, 3, '-', '7 - 3', 4),
            # Test multiplication
            (4, 6, '*', '4 * 6', 24),
            # Test division (note: handle division by zero cases)
            (8, 4, '/', '8 / 4', 2),
            (8, 0, '/', '8 / 0', None),  # Division by zero should return None or some error
        ]

        for num1, num2, operator, expected_problem, expected_answer in test_cases:
            try:
                # Generate the math problem using function_C
                problem, answer = function_C(num1, num2, operator)

                # Check if the generated problem matches the expected problem
                self.assertEqual(problem, expected_problem, f"Expected {expected_problem}, but got {problem}")
                # Check if the answer is correct
                self.assertEqual(answer, expected_answer, f"Expected {expected_answer}, but got {answer}")
            except Exception as e:
                self.fail(f"Error in test_function_C: {e}")

if __name__ == "__main__":
    # Run the tests
    unittest.main()
